{
  "/Users/davest/Desktop/storefront-api/serverless.yml": {
    "versionFramework": "4.14.1",
    "servicePath": "/Users/davest/Desktop/storefront-api/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "storefront-api",
      "frameworkVersion": "4",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "stage": "production",
        "region": "eu-west-2",
        "memorySize": 1024,
        "timeout": 29,
        "environment": {
          "NODE_ENV": "dev",
          "DATABASE_URL": "postgres://dave:mophir3digit@database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com:5432/storefront?sslmode=require",
          "DB_HOST": "database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com",
          "DB_PORT": "5432",
          "DB_USERNAME": "dave",
          "DB_PASSWORD": "<REDACTED>",
          "DB_DATABASE": "storefront",
          "JWT_SECRET": "<REDACTED>",
          "FRONTEND_URL": "https://storefront-virid.vercel.app",
          "USE_FALLBACK_DATA": "false",
          "DB_USE_SSL": "true"
        },
        "vpc": {
          "securityGroupIds": ["sg-059642d97326cb72f"],
          "subnetIds": [
            "subnet-0ef8327e8c86f38c5",
            "subnet-02048d123728927ea",
            "subnet-02433fd3ced24f68e"
          ]
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": ["ssm:GetParameter", "ssm:GetParameters"],
                "Resource": "arn:aws:ssm:eu-west-2:*:parameter/storefront/production/*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                  "ec2:AssignPrivateIpAddresses",
                  "ec2:UnassignPrivateIpAddresses"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": ["rds-db:connect"],
                "Resource": "*"
              }
            ]
          }
        },
        "apiGateway": {
          "binaryMediaTypes": ["image/jpeg", "image/png", "application/octet-stream"]
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/storefront-api-production-api"
              }
            },
            "HealthLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/storefront-api-production-health"
              }
            },
            "DebugDashdbLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/storefront-api-production-debug-db"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": ["lambda.amazonaws.com"]
                      },
                      "Action": ["sts:AssumeRole"]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": ["-", ["storefront-api", "production", "lambda"]]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/storefront-api-production*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": ["logs:PutLogEvents"],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/storefront-api-production*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": ["ssm:GetParameter", "ssm:GetParameters"],
                          "Resource": "arn:aws:ssm:eu-west-2:*:parameter/storefront/production/*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "ec2:CreateNetworkInterface",
                            "ec2:DescribeNetworkInterfaces",
                            "ec2:DeleteNetworkInterface",
                            "ec2:AssignPrivateIpAddresses",
                            "ec2:UnassignPrivateIpAddresses"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": ["rds-db:connect"],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "storefront-api",
                      "production",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                },
                "ManagedPolicyArns": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                      ]
                    ]
                  }
                ]
              }
            },
            "ApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
                  "S3Key": "serverless/storefront-api/production/1745524607002-2025-04-24T19:56:47.002Z/storefront-api.zip"
                },
                "Handler": "dist/lambda.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "storefront-api-production-api",
                "MemorySize": 1024,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "NODE_ENV": "dev",
                    "DATABASE_URL": "postgres://dave:mophir3digit@database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com:5432/storefront?sslmode=require",
                    "DB_HOST": "database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com",
                    "DB_PORT": "5432",
                    "DB_USERNAME": "dave",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_DATABASE": "storefront",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://storefront-virid.vercel.app",
                    "USE_FALLBACK_DATA": "false",
                    "DB_USE_SSL": "true"
                  }
                },
                "Role": {
                  "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
                },
                "VpcConfig": {
                  "SecurityGroupIds": ["sg-059642d97326cb72f"],
                  "SubnetIds": [
                    "subnet-0ef8327e8c86f38c5",
                    "subnet-02048d123728927ea",
                    "subnet-02433fd3ced24f68e"
                  ]
                }
              },
              "DependsOn": ["ApiLogGroup"]
            },
            "HealthLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
                  "S3Key": "serverless/storefront-api/production/1745524607002-2025-04-24T19:56:47.002Z/storefront-api.zip"
                },
                "Handler": "dist/health.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "storefront-api-production-health",
                "MemorySize": 512,
                "Timeout": 10,
                "Environment": {
                  "Variables": {
                    "NODE_ENV": "dev",
                    "DATABASE_URL": "postgres://dave:mophir3digit@database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com:5432/storefront?sslmode=require",
                    "DB_HOST": "database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com",
                    "DB_PORT": "5432",
                    "DB_USERNAME": "dave",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_DATABASE": "storefront",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://storefront-virid.vercel.app",
                    "USE_FALLBACK_DATA": "false",
                    "DB_USE_SSL": "true"
                  }
                },
                "Role": {
                  "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
                },
                "VpcConfig": {
                  "SecurityGroupIds": ["sg-059642d97326cb72f"],
                  "SubnetIds": [
                    "subnet-0ef8327e8c86f38c5",
                    "subnet-02048d123728927ea",
                    "subnet-02433fd3ced24f68e"
                  ]
                }
              },
              "DependsOn": ["HealthLogGroup"]
            },
            "DebugDashdbLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
                  "S3Key": "serverless/storefront-api/production/1745524607002-2025-04-24T19:56:47.002Z/storefront-api.zip"
                },
                "Handler": "dist/debug-db.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "storefront-api-production-debug-db",
                "MemorySize": 512,
                "Timeout": 10,
                "Environment": {
                  "Variables": {
                    "NODE_ENV": "dev",
                    "DATABASE_URL": "postgres://dave:mophir3digit@database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com:5432/storefront?sslmode=require",
                    "DB_HOST": "database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com",
                    "DB_PORT": "5432",
                    "DB_USERNAME": "dave",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_DATABASE": "storefront",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://storefront-virid.vercel.app",
                    "USE_FALLBACK_DATA": "false",
                    "DB_USE_SSL": "true"
                  }
                },
                "Role": {
                  "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
                },
                "VpcConfig": {
                  "SecurityGroupIds": ["sg-059642d97326cb72f"],
                  "SubnetIds": [
                    "subnet-0ef8327e8c86f38c5",
                    "subnet-02048d123728927ea",
                    "subnet-02433fd3ced24f68e"
                  ]
                }
              },
              "DependsOn": ["DebugDashdbLogGroup"]
            },
            "ApiLambdaVersionyth6PHMLgAUSxlaijqDk3R6Q8f1n8qLp4lAYEvJ274": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApiLambdaFunction"
                },
                "CodeSha256": "/rEH77B8I5FqzGtmv9XwSujYYqI7+3duU3i93gSpBl8="
              }
            },
            "HealthLambdaVersion3mlcFXFUvcHewiSn2Cy4Ome2fOvnFo3rBGarh0MilQk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "HealthLambdaFunction"
                },
                "CodeSha256": "/rEH77B8I5FqzGtmv9XwSujYYqI7+3duU3i93gSpBl8="
              }
            },
            "DebugDashdbLambdaVersionrh5GLFZAMo5D3P9KVuhYfx8N0rNppnKluCq9ZPPJo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DebugDashdbLambdaFunction"
                },
                "CodeSha256": "/rEH77B8I5FqzGtmv9XwSujYYqI7+3duU3i93gSpBl8="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "production-storefront-api",
                "BinaryMediaTypes": ["image/jpeg", "image/png", "application/octet-stream"],
                "EndpointConfiguration": {
                  "Types": ["EDGE"]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceHealth": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
                },
                "PathPart": "health",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDebugDashdb": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
                },
                "PathPart": "debug-db",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProxyVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodHealthOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceHealth"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodDebugDashdbOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDebugDashdb"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": ["ApiLambdaFunction", "Arn"]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": ["ApiLambdaPermissionApiGateway"]
            },
            "ApiGatewayMethodProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": ["ApiLambdaFunction", "Arn"]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": ["ApiLambdaPermissionApiGateway"]
            },
            "ApiGatewayMethodHealthGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceHealth"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": ["HealthLambdaFunction", "Arn"]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": ["HealthLambdaPermissionApiGateway"]
            },
            "ApiGatewayMethodDebugDashdbGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDebugDashdb"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": ["DebugDashdbLambdaFunction", "Arn"]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": ["DebugDashdbLambdaPermissionApiGateway"]
            },
            "ApiGatewayDeployment1745524595743": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "production"
              },
              "DependsOn": [
                "ApiGatewayMethodOptions",
                "ApiGatewayMethodProxyVarOptions",
                "ApiGatewayMethodHealthOptions",
                "ApiGatewayMethodDebugDashdbOptions",
                "ApiGatewayMethodAny",
                "ApiGatewayMethodProxyVarAny",
                "ApiGatewayMethodHealthGet",
                "ApiGatewayMethodDebugDashdbGet"
              ]
            },
            "ApiLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": ["ApiLambdaFunction", "Arn"]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "HealthLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": ["HealthLambdaFunction", "Arn"]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DebugDashdbLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": ["DebugDashdbLambdaFunction", "Arn"]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
              "Export": {
                "Name": "sls-storefront-api-production-ServerlessDeploymentBucketName"
              }
            },
            "ApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApiLambdaVersionyth6PHMLgAUSxlaijqDk3R6Q8f1n8qLp4lAYEvJ274"
              },
              "Export": {
                "Name": "sls-storefront-api-production-ApiLambdaFunctionQualifiedArn"
              }
            },
            "HealthLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "HealthLambdaVersion3mlcFXFUvcHewiSn2Cy4Ome2fOvnFo3rBGarh0MilQk"
              },
              "Export": {
                "Name": "sls-storefront-api-production-HealthLambdaFunctionQualifiedArn"
              }
            },
            "DebugDashdbLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DebugDashdbLambdaVersionrh5GLFZAMo5D3P9KVuhYfx8N0rNppnKluCq9ZPPJo"
              },
              "Export": {
                "Name": "sls-storefront-api-production-DebugDashdbLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/production"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-storefront-api-production-ServiceEndpoint"
              }
            }
          }
        }
      },
      "functions": {
        "api": {
          "handler": "dist/lambda.handler",
          "events": [
            {
              "http": {
                "path": "",
                "method": "any",
                "cors": {
                  "origin": "*",
                  "methods": ["OPTIONS", "ANY"],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "{proxy+}",
                "method": "any",
                "cors": {
                  "origin": "*",
                  "methods": ["OPTIONS", "ANY"],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "timeout": 29,
          "name": "storefront-api-production-api",
          "package": {},
          "memory": 1024,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ApiLambdaVersionyth6PHMLgAUSxlaijqDk3R6Q8f1n8qLp4lAYEvJ274"
        },
        "health": {
          "handler": "dist/health.handler",
          "events": [
            {
              "http": {
                "path": "health",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": ["OPTIONS", "GET"],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 512,
          "timeout": 10,
          "name": "storefront-api-production-health",
          "package": {},
          "memory": 512,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "HealthLambdaVersion3mlcFXFUvcHewiSn2Cy4Ome2fOvnFo3rBGarh0MilQk"
        },
        "debug-db": {
          "handler": "dist/debug-db.handler",
          "events": [
            {
              "http": {
                "path": "debug-db",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": ["OPTIONS", "GET"],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 512,
          "timeout": 10,
          "name": "storefront-api-production-debug-db",
          "package": {},
          "memory": 512,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DebugDashdbLambdaVersionrh5GLFZAMo5D3P9KVuhYfx8N0rNppnKluCq9ZPPJo"
        }
      },
      "package": {
        "patterns": ["dist/**", "node_modules/**", "!node_modules/.bin/**", "!.git/**", "!test/**"],
        "artifactsS3KeyDirname": "serverless/storefront-api/production/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
        "artifact": "/Users/davest/Desktop/storefront-api/.serverless/storefront-api.zip",
        "artifactDirectoryName": "serverless/storefront-api/production/1745524607002-2025-04-24T19:56:47.002Z"
      },
      "custom": {
        "logs": {
          "restApi": true
        },
        "prune": {
          "automatic": true,
          "number": 3
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "stage": "production",
      "region": "eu-west-2",
      "memorySize": 1024,
      "timeout": 29,
      "environment": {
        "NODE_ENV": "dev",
        "DATABASE_URL": "postgres://dave:mophir3digit@database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com:5432/storefront?sslmode=require",
        "DB_HOST": "database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com",
        "DB_PORT": "5432",
        "DB_USERNAME": "dave",
        "DB_PASSWORD": "<REDACTED>",
        "DB_DATABASE": "storefront",
        "JWT_SECRET": "<REDACTED>",
        "FRONTEND_URL": "https://storefront-virid.vercel.app",
        "USE_FALLBACK_DATA": "false",
        "DB_USE_SSL": "true"
      },
      "vpc": {
        "securityGroupIds": ["sg-059642d97326cb72f"],
        "subnetIds": [
          "subnet-0ef8327e8c86f38c5",
          "subnet-02048d123728927ea",
          "subnet-02433fd3ced24f68e"
        ]
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": ["ssm:GetParameter", "ssm:GetParameters"],
              "Resource": "arn:aws:ssm:eu-west-2:*:parameter/storefront/production/*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": ["rds-db:connect"],
              "Resource": "*"
            }
          ]
        }
      },
      "apiGateway": {
        "binaryMediaTypes": ["image/jpeg", "image/png", "application/octet-stream"]
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/storefront-api-production-api"
            }
          },
          "HealthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/storefront-api-production-health"
            }
          },
          "DebugDashdbLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/storefront-api-production-debug-db"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": ["lambda.amazonaws.com"]
                    },
                    "Action": ["sts:AssumeRole"]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": ["-", ["storefront-api", "production", "lambda"]]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/storefront-api-production*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": ["logs:PutLogEvents"],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/storefront-api-production*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": ["ssm:GetParameter", "ssm:GetParameters"],
                        "Resource": "arn:aws:ssm:eu-west-2:*:parameter/storefront/production/*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ec2:CreateNetworkInterface",
                          "ec2:DescribeNetworkInterfaces",
                          "ec2:DeleteNetworkInterface",
                          "ec2:AssignPrivateIpAddresses",
                          "ec2:UnassignPrivateIpAddresses"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": ["rds-db:connect"],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "storefront-api",
                    "production",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
                "S3Key": "serverless/storefront-api/production/1745524607002-2025-04-24T19:56:47.002Z/storefront-api.zip"
              },
              "Handler": "dist/lambda.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "storefront-api-production-api",
              "MemorySize": 1024,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DATABASE_URL": "postgres://dave:mophir3digit@database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com:5432/storefront?sslmode=require",
                  "DB_HOST": "database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com",
                  "DB_PORT": "5432",
                  "DB_USERNAME": "dave",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_DATABASE": "storefront",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://storefront-virid.vercel.app",
                  "USE_FALLBACK_DATA": "false",
                  "DB_USE_SSL": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
              },
              "VpcConfig": {
                "SecurityGroupIds": ["sg-059642d97326cb72f"],
                "SubnetIds": [
                  "subnet-0ef8327e8c86f38c5",
                  "subnet-02048d123728927ea",
                  "subnet-02433fd3ced24f68e"
                ]
              }
            },
            "DependsOn": ["ApiLogGroup"]
          },
          "HealthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
                "S3Key": "serverless/storefront-api/production/1745524607002-2025-04-24T19:56:47.002Z/storefront-api.zip"
              },
              "Handler": "dist/health.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "storefront-api-production-health",
              "MemorySize": 512,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DATABASE_URL": "postgres://dave:mophir3digit@database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com:5432/storefront?sslmode=require",
                  "DB_HOST": "database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com",
                  "DB_PORT": "5432",
                  "DB_USERNAME": "dave",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_DATABASE": "storefront",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://storefront-virid.vercel.app",
                  "USE_FALLBACK_DATA": "false",
                  "DB_USE_SSL": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
              },
              "VpcConfig": {
                "SecurityGroupIds": ["sg-059642d97326cb72f"],
                "SubnetIds": [
                  "subnet-0ef8327e8c86f38c5",
                  "subnet-02048d123728927ea",
                  "subnet-02433fd3ced24f68e"
                ]
              }
            },
            "DependsOn": ["HealthLogGroup"]
          },
          "DebugDashdbLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
                "S3Key": "serverless/storefront-api/production/1745524607002-2025-04-24T19:56:47.002Z/storefront-api.zip"
              },
              "Handler": "dist/debug-db.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "storefront-api-production-debug-db",
              "MemorySize": 512,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DATABASE_URL": "postgres://dave:mophir3digit@database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com:5432/storefront?sslmode=require",
                  "DB_HOST": "database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com",
                  "DB_PORT": "5432",
                  "DB_USERNAME": "dave",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_DATABASE": "storefront",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://storefront-virid.vercel.app",
                  "USE_FALLBACK_DATA": "false",
                  "DB_USE_SSL": "true"
                }
              },
              "Role": {
                "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
              },
              "VpcConfig": {
                "SecurityGroupIds": ["sg-059642d97326cb72f"],
                "SubnetIds": [
                  "subnet-0ef8327e8c86f38c5",
                  "subnet-02048d123728927ea",
                  "subnet-02433fd3ced24f68e"
                ]
              }
            },
            "DependsOn": ["DebugDashdbLogGroup"]
          },
          "ApiLambdaVersionyth6PHMLgAUSxlaijqDk3R6Q8f1n8qLp4lAYEvJ274": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "/rEH77B8I5FqzGtmv9XwSujYYqI7+3duU3i93gSpBl8="
            }
          },
          "HealthLambdaVersion3mlcFXFUvcHewiSn2Cy4Ome2fOvnFo3rBGarh0MilQk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HealthLambdaFunction"
              },
              "CodeSha256": "/rEH77B8I5FqzGtmv9XwSujYYqI7+3duU3i93gSpBl8="
            }
          },
          "DebugDashdbLambdaVersionrh5GLFZAMo5D3P9KVuhYfx8N0rNppnKluCq9ZPPJo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DebugDashdbLambdaFunction"
              },
              "CodeSha256": "/rEH77B8I5FqzGtmv9XwSujYYqI7+3duU3i93gSpBl8="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "production-storefront-api",
              "BinaryMediaTypes": ["image/jpeg", "image/png", "application/octet-stream"],
              "EndpointConfiguration": {
                "Types": ["EDGE"]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceHealth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
              },
              "PathPart": "health",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDebugDashdb": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
              },
              "PathPart": "debug-db",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHealthOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDebugDashdbOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDebugDashdb"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": ["ApiLambdaFunction", "Arn"]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": ["ApiLambdaPermissionApiGateway"]
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": ["ApiLambdaFunction", "Arn"]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": ["ApiLambdaPermissionApiGateway"]
          },
          "ApiGatewayMethodHealthGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": ["HealthLambdaFunction", "Arn"]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": ["HealthLambdaPermissionApiGateway"]
          },
          "ApiGatewayMethodDebugDashdbGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDebugDashdb"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": ["DebugDashdbLambdaFunction", "Arn"]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": ["DebugDashdbLambdaPermissionApiGateway"]
          },
          "ApiGatewayDeployment1745524595743": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "production"
            },
            "DependsOn": [
              "ApiGatewayMethodOptions",
              "ApiGatewayMethodProxyVarOptions",
              "ApiGatewayMethodHealthOptions",
              "ApiGatewayMethodDebugDashdbOptions",
              "ApiGatewayMethodAny",
              "ApiGatewayMethodProxyVarAny",
              "ApiGatewayMethodHealthGet",
              "ApiGatewayMethodDebugDashdbGet"
            ]
          },
          "ApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": ["ApiLambdaFunction", "Arn"]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HealthLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": ["HealthLambdaFunction", "Arn"]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DebugDashdbLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": ["DebugDashdbLambdaFunction", "Arn"]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
            "Export": {
              "Name": "sls-storefront-api-production-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionyth6PHMLgAUSxlaijqDk3R6Q8f1n8qLp4lAYEvJ274"
            },
            "Export": {
              "Name": "sls-storefront-api-production-ApiLambdaFunctionQualifiedArn"
            }
          },
          "HealthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HealthLambdaVersion3mlcFXFUvcHewiSn2Cy4Ome2fOvnFo3rBGarh0MilQk"
            },
            "Export": {
              "Name": "sls-storefront-api-production-HealthLambdaFunctionQualifiedArn"
            }
          },
          "DebugDashdbLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DebugDashdbLambdaVersionrh5GLFZAMo5D3P9KVuhYfx8N0rNppnKluCq9ZPPJo"
            },
            "Export": {
              "Name": "sls-storefront-api-production-DebugDashdbLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/production"
                ]
              ]
            },
            "Export": {
              "Name": "sls-storefront-api-production-ServiceEndpoint"
            }
          }
        }
      }
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: storefront-api\n\nframeworkVersion: '4'\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  stage: ${opt:stage, 'production'}\n  region: eu-west-2\n  memorySize: 1024  # Increase memory for better performance\n  timeout: 29\n  environment:\n    NODE_ENV: ${opt:stage, 'dev'}\n    DATABASE_URL: ${ssm:/storefront/${opt:stage, 'dev'}/DATABASE_URL}\n    DB_HOST: ${ssm:/storefront/${opt:stage, 'dev'}/DB_HOST}\n    DB_PORT: ${ssm:/storefront/${opt:stage, 'dev'}/DB_PORT}\n    DB_USERNAME: ${ssm:/storefront/${opt:stage, 'dev'}/DB_USERNAME}\n    DB_PASSWORD: ${ssm:/storefront/${opt:stage, 'dev'}/DB_PASSWORD}\n    DB_DATABASE: ${ssm:/storefront/${opt:stage, 'dev'}/DB_DATABASE}\n    JWT_SECRET: ${ssm:/storefront/${opt:stage, 'dev'}/JWT_SECRET}\n    FRONTEND_URL: ${ssm:/storefront/${opt:stage, 'dev'}/FRONTEND_URL}\n    USE_FALLBACK_DATA: 'false' \n    DB_USE_SSL: 'true'\n  vpc:\n    securityGroupIds:\n      - sg-059642d97326cb72f  # Ensure this security group can access your RDS security group\n    subnetIds:\n      - subnet-0ef8327e8c86f38c5  # These should be in private subnets with NAT gateway \n      - subnet-02048d123728927ea  # or in the same subnet as your RDS instance\n      - subnet-02433fd3ced24f68e\n  iam:\n    role:\n      statements:\n        # Parameter Store permissions\n        - Effect: Allow\n          Action:\n            - ssm:GetParameter\n            - ssm:GetParameters\n          Resource: \n            - arn:aws:ssm:${self:provider.region}:*:parameter/storefront/${self:provider.stage}/*\n        \n        # VPC permissions required for Lambda to connect to RDS\n        - Effect: Allow\n          Action:\n            - ec2:CreateNetworkInterface\n            - ec2:DescribeNetworkInterfaces\n            - ec2:DeleteNetworkInterface\n            - ec2:AssignPrivateIpAddresses\n            - ec2:UnassignPrivateIpAddresses\n          Resource: '*'\n        \n        # Explicitly add RDS permissions\n        - Effect: Allow\n          Action:\n            - rds-db:connect\n          Resource: '*'\n  apiGateway:\n    binaryMediaTypes:\n      - 'image/jpeg'\n      - 'image/png'\n      - 'application/octet-stream'\n\nfunctions:\n  api:\n    handler: dist/lambda.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n          cors: true\n      - http:\n          path: /{proxy+}\n          method: ANY\n          cors: true\n    # Longer timeout for database connections\n    timeout: 29\n\n  # Add a separate health check function with faster cold start\n  health:\n    handler: dist/health.handler\n    events:\n      - http:\n          path: /health\n          method: get\n          cors: true\n    memorySize: 512\n    timeout: 10\n\n  debug-db:\n    handler: dist/debug-db.handler\n    events:\n      - http:\n          path: /debug-db\n          method: get\n          cors: true\n    memorySize: 512\n    timeout: 10\n\npackage:\n  patterns:\n    - 'dist/**'\n    - 'node_modules/**'\n    - '!node_modules/.bin/**'\n    - '!.git/**'\n    - '!test/**'\n\n# Add CloudWatch log configuration for better debugging\ncustom:\n  logs:\n    restApi: true\n  prune:\n    automatic: true\n    number: 3",
    "command": ["deploy"],
    "options": {},
    "orgId": "006cea91-e273-49b5-a751-760109a409f0",
    "orgName": "mophire",
    "userId": "PJR5RQF49B6MVsXMzL",
    "userName": "mophire",
    "serviceProviderAwsAccountId": "058264347310",
    "serviceProviderAwsCfStackName": "storefront-api-production",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-west-2:058264347310:stack/storefront-api-production/632e7bf0-2126-11f0-b9ba-0a8527fb383d",
    "serviceProviderAwsCfStackCreated": "2025-04-24T16:08:40.607Z",
    "serviceProviderAwsCfStackUpdated": "2025-04-24T19:04:50.564Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "DebugDashdbLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-west-2:058264347310:function:storefront-api-production-debug-db:8",
        "Description": "Current Lambda function version",
        "ExportName": "sls-storefront-api-production-DebugDashdbLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-west-2:058264347310:function:storefront-api-production-api:8",
        "Description": "Current Lambda function version",
        "ExportName": "sls-storefront-api-production-ApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HealthLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-west-2:058264347310:function:storefront-api-production-health:8",
        "Description": "Current Lambda function version",
        "ExportName": "sls-storefront-api-production-HealthLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://qxh9w8hhyi.execute-api.eu-west-2.amazonaws.com/production",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-storefront-api-production-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
        "ExportName": "sls-storefront-api-production-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "ApiLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/storefront-api-production-api"
          }
        },
        "HealthLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/storefront-api-production-health"
          }
        },
        "DebugDashdbLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/storefront-api-production-debug-db"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": ["lambda.amazonaws.com"]
                  },
                  "Action": ["sts:AssumeRole"]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": ["-", ["storefront-api", "production", "lambda"]]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": ["logs:CreateLogStream", "logs:CreateLogGroup", "logs:TagResource"],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/storefront-api-production*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": ["logs:PutLogEvents"],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/storefront-api-production*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": ["ssm:GetParameter", "ssm:GetParameters"],
                      "Resource": "arn:aws:ssm:eu-west-2:*:parameter/storefront/production/*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ec2:CreateNetworkInterface",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DeleteNetworkInterface",
                        "ec2:AssignPrivateIpAddresses",
                        "ec2:UnassignPrivateIpAddresses"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": ["rds-db:connect"],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "storefront-api",
                  "production",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            },
            "ManagedPolicyArns": [
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                  ]
                ]
              }
            ]
          }
        },
        "ApiLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
              "S3Key": "serverless/storefront-api/production/1745524607002-2025-04-24T19:56:47.002Z/storefront-api.zip"
            },
            "Handler": "dist/lambda.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "storefront-api-production-api",
            "MemorySize": 1024,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "NODE_ENV": "dev",
                "DATABASE_URL": "postgres://dave:mophir3digit@database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com:5432/storefront?sslmode=require",
                "DB_HOST": "database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com",
                "DB_PORT": "5432",
                "DB_USERNAME": "dave",
                "DB_PASSWORD": "<REDACTED>",
                "DB_DATABASE": "storefront",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://storefront-virid.vercel.app",
                "USE_FALLBACK_DATA": "false",
                "DB_USE_SSL": "true"
              }
            },
            "Role": {
              "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
            },
            "VpcConfig": {
              "SecurityGroupIds": ["sg-059642d97326cb72f"],
              "SubnetIds": [
                "subnet-0ef8327e8c86f38c5",
                "subnet-02048d123728927ea",
                "subnet-02433fd3ced24f68e"
              ]
            }
          },
          "DependsOn": ["ApiLogGroup"]
        },
        "HealthLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
              "S3Key": "serverless/storefront-api/production/1745524607002-2025-04-24T19:56:47.002Z/storefront-api.zip"
            },
            "Handler": "dist/health.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "storefront-api-production-health",
            "MemorySize": 512,
            "Timeout": 10,
            "Environment": {
              "Variables": {
                "NODE_ENV": "dev",
                "DATABASE_URL": "postgres://dave:mophir3digit@database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com:5432/storefront?sslmode=require",
                "DB_HOST": "database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com",
                "DB_PORT": "5432",
                "DB_USERNAME": "dave",
                "DB_PASSWORD": "<REDACTED>",
                "DB_DATABASE": "storefront",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://storefront-virid.vercel.app",
                "USE_FALLBACK_DATA": "false",
                "DB_USE_SSL": "true"
              }
            },
            "Role": {
              "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
            },
            "VpcConfig": {
              "SecurityGroupIds": ["sg-059642d97326cb72f"],
              "SubnetIds": [
                "subnet-0ef8327e8c86f38c5",
                "subnet-02048d123728927ea",
                "subnet-02433fd3ced24f68e"
              ]
            }
          },
          "DependsOn": ["HealthLogGroup"]
        },
        "DebugDashdbLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
              "S3Key": "serverless/storefront-api/production/1745524607002-2025-04-24T19:56:47.002Z/storefront-api.zip"
            },
            "Handler": "dist/debug-db.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "storefront-api-production-debug-db",
            "MemorySize": 512,
            "Timeout": 10,
            "Environment": {
              "Variables": {
                "NODE_ENV": "dev",
                "DATABASE_URL": "postgres://dave:mophir3digit@database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com:5432/storefront?sslmode=require",
                "DB_HOST": "database-1.cpgm042cq1en.eu-west-2.rds.amazonaws.com",
                "DB_PORT": "5432",
                "DB_USERNAME": "dave",
                "DB_PASSWORD": "<REDACTED>",
                "DB_DATABASE": "storefront",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://storefront-virid.vercel.app",
                "USE_FALLBACK_DATA": "false",
                "DB_USE_SSL": "true"
              }
            },
            "Role": {
              "Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
            },
            "VpcConfig": {
              "SecurityGroupIds": ["sg-059642d97326cb72f"],
              "SubnetIds": [
                "subnet-0ef8327e8c86f38c5",
                "subnet-02048d123728927ea",
                "subnet-02433fd3ced24f68e"
              ]
            }
          },
          "DependsOn": ["DebugDashdbLogGroup"]
        },
        "ApiLambdaVersionyth6PHMLgAUSxlaijqDk3R6Q8f1n8qLp4lAYEvJ274": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ApiLambdaFunction"
            },
            "CodeSha256": "/rEH77B8I5FqzGtmv9XwSujYYqI7+3duU3i93gSpBl8="
          }
        },
        "HealthLambdaVersion3mlcFXFUvcHewiSn2Cy4Ome2fOvnFo3rBGarh0MilQk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "HealthLambdaFunction"
            },
            "CodeSha256": "/rEH77B8I5FqzGtmv9XwSujYYqI7+3duU3i93gSpBl8="
          }
        },
        "DebugDashdbLambdaVersionrh5GLFZAMo5D3P9KVuhYfx8N0rNppnKluCq9ZPPJo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DebugDashdbLambdaFunction"
            },
            "CodeSha256": "/rEH77B8I5FqzGtmv9XwSujYYqI7+3duU3i93gSpBl8="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "production-storefront-api",
            "BinaryMediaTypes": ["image/jpeg", "image/png", "application/octet-stream"],
            "EndpointConfiguration": {
              "Types": ["EDGE"]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceProxyVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
            },
            "PathPart": "{proxy+}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceHealth": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
            },
            "PathPart": "health",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceDebugDashdb": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
            },
            "PathPart": "debug-db",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodProxyVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceProxyVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodHealthOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceHealth"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodDebugDashdbOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceDebugDashdb"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAny": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "ANY",
            "RequestParameters": {},
            "ResourceId": {
              "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": ["ApiLambdaFunction", "Arn"]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": ["ApiLambdaPermissionApiGateway"]
        },
        "ApiGatewayMethodProxyVarAny": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "ANY",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceProxyVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": ["ApiLambdaFunction", "Arn"]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": ["ApiLambdaPermissionApiGateway"]
        },
        "ApiGatewayMethodHealthGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceHealth"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": ["HealthLambdaFunction", "Arn"]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": ["HealthLambdaPermissionApiGateway"]
        },
        "ApiGatewayMethodDebugDashdbGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceDebugDashdb"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": ["DebugDashdbLambdaFunction", "Arn"]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": ["DebugDashdbLambdaPermissionApiGateway"]
        },
        "ApiGatewayDeployment1745524595743": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "production"
          },
          "DependsOn": [
            "ApiGatewayMethodOptions",
            "ApiGatewayMethodProxyVarOptions",
            "ApiGatewayMethodHealthOptions",
            "ApiGatewayMethodDebugDashdbOptions",
            "ApiGatewayMethodAny",
            "ApiGatewayMethodProxyVarAny",
            "ApiGatewayMethodHealthGet",
            "ApiGatewayMethodDebugDashdbGet"
          ]
        },
        "ApiLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": ["ApiLambdaFunction", "Arn"]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "HealthLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": ["HealthLambdaFunction", "Arn"]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "DebugDashdbLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": ["DebugDashdbLambdaFunction", "Arn"]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-eu-west-2-4e33c77a-a1c3",
          "Export": {
            "Name": "sls-storefront-api-production-ServerlessDeploymentBucketName"
          }
        },
        "ApiLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ApiLambdaVersionyth6PHMLgAUSxlaijqDk3R6Q8f1n8qLp4lAYEvJ274"
          },
          "Export": {
            "Name": "sls-storefront-api-production-ApiLambdaFunctionQualifiedArn"
          }
        },
        "HealthLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "HealthLambdaVersion3mlcFXFUvcHewiSn2Cy4Ome2fOvnFo3rBGarh0MilQk"
          },
          "Export": {
            "Name": "sls-storefront-api-production-HealthLambdaFunctionQualifiedArn"
          }
        },
        "DebugDashdbLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DebugDashdbLambdaVersionrh5GLFZAMo5D3P9KVuhYfx8N0rNppnKluCq9ZPPJo"
          },
          "Export": {
            "Name": "sls-storefront-api-production-DebugDashdbLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/production"
              ]
            ]
          },
          "Export": {
            "Name": "sls-storefront-api-production-ServiceEndpoint"
          }
        }
      }
    }
  }
}
