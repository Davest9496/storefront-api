service: storefront-api

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'production'}
  region: eu-west-2
  memorySize: 1024  # Increase memory for better performance
  timeout: 29
  environment:
    NODE_ENV: ${opt:stage, 'dev'}
    DATABASE_URL: ${ssm:/storefront/${opt:stage, 'dev'}/DATABASE_URL}
    DB_HOST: ${ssm:/storefront/${opt:stage, 'dev'}/DB_HOST}
    DB_PORT: ${ssm:/storefront/${opt:stage, 'dev'}/DB_PORT}
    DB_USERNAME: ${ssm:/storefront/${opt:stage, 'dev'}/DB_USERNAME}
    DB_PASSWORD: ${ssm:/storefront/${opt:stage, 'dev'}/DB_PASSWORD}
    DB_DATABASE: ${ssm:/storefront/${opt:stage, 'dev'}/DB_DATABASE}
    JWT_SECRET: ${ssm:/storefront/${opt:stage, 'dev'}/JWT_SECRET}
    FRONTEND_URL: ${ssm:/storefront/${opt:stage, 'dev'}/FRONTEND_URL}
    USE_FALLBACK_DATA: 'false' 
    DB_USE_SSL: 'true'
  vpc:
    securityGroupIds:
      - sg-059642d97326cb72f
    subnetIds:
      - subnet-0ef8327e8c86f38c5
      - subnet-02048d123728927ea
      - subnet-02433fd3ced24f68e
  iam:
    role:
      statements:
        # Parameter Store permissions
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: 
            - arn:aws:ssm:${self:provider.region}:*:parameter/storefront/${self:provider.stage}/*
        
        # VPC permissions required for Lambda to connect to RDS
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
          Resource: '*'
        
        # Explicitly add RDS permissions
        - Effect: Allow
          Action:
            - rds-db:connect
          Resource: '*'
  apiGateway:
    binaryMediaTypes:
      - 'image/jpeg'
      - 'image/png'
      - 'application/octet-stream'

functions:
  api:
    handler: dist/lambda.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    # Longer timeout for database connections
    timeout: 29

  # Add a separate health check function with faster cold start
  health:
    handler: dist/health.handler
    events:
      - http:
          path: /health
          method: get
          cors: true
    memorySize: 512
    timeout: 10

  debug-db:
    handler: dist/debug-db.handler
    events:
      - http:
          path: /debug-db
          method: get
          cors: true
    memorySize: 512
    timeout: 10

package:
  patterns:
    - 'dist/**'
    - 'node_modules/**'
    - '!node_modules/.bin/**'
    - '!.git/**'
    - '!test/**'

# Add CloudWatch log configuration for better debugging
custom:
  logs:
    restApi: true
  prune:
    automatic: true
    number: 3